<div class="row">

		<div class="panel panel-primary">
				<div class="panel-heading clearfix">
						<div class="panel-title">
								Manage Employee Records
								<div class="btn-group pull-right">
										<a asp-action="Create" asp-controller="Employees" class="btn btn-default btn-group-lg ">Add</a>
										<a href="#" class="btn btn-danger  btn-group-lg ">Delete</a>
								</div>
						</div>
				</div>

				<div class="panel-body">
						<div class="row">
								<div class="col-md-12">
										<table class="table table-hover">
												<thead>
														<tr>
																<th>Photo</th>
																<th>FullName</th>
																<th>Join Date</th>
																<th>Created At</th>
																<th>Updated At</th>
																<th>&nbsp;</th>
																<th>&nbsp;</th>
														</tr>
												</thead>
												<tbody id="employeeTableBody"></tbody>
										</table>
								</div>
						</div>
				</div>
		</div>
</div>


<script>


				loadEmployeeData();

				function loadEmployeeData() {
					//Note: jQuery.ajax(..) is also often written is $.ajax(..)
						var $loadEmployeeDataHandler = jQuery.ajax({
						url: '/Api/Employees',
						method: 'GET',
						dataType: 'json',
						cache: false,
					});
					$loadEmployeeDataHandler.done(function (data, textStatus, jqXHR) {
						//This done method will
						//The (data) input parameter automatically captures the response from the
						//Get() API method which is labelled to handle this GET request.

						//I usually use the following code
						//to inspect the returned result captured by the data input parameter
						//from the web server.
						console.log(data);

						//After inspecting the data object with the console.log
						//I have clear picture of the structure and used
						//the following variable to represent the response.d
						var employeeList = data;
						var employeeId = '';
						var fullName = '';
						var joinDate = '';
						var createdAt = '';
						var updatedAt = ''
						var $tableElement = null;
						var $cellElement = null;
						var $rowElement = null;
						//-------- Find the table element -----------
						//I am using the $tableElement variable
						//to represent the found HTML element which has a matching id of employeeTableBody
						$tableBodyElement = $('#employeeTableBody');

						//I want to build rows and cells (using tr and td HTML elements) so that
						//I can display full name, join date, created at, updated at information
						//within the HTML table element, employeeTableBody. Recall that, I have already asked the
						//$tableBodyElement variable to represent (reference) the table element.

						//-------- Begin creating <tr> and <td> HTML element ------
						for (index = 0; index < employeeList.length; index++) {
							//Set this employee variable to reference an object
							//inside the employeeList Array.
						 var  employee = employeeList[index];
							//Copy out the course information
						 var employeeId = employee.employeeId;
						 var fullName = employee.fullName;
						 var joinDate = moment(employee.joinDate).format("DD/MM/YYYY");
						 var createdAt = moment(employee.createdAt).format("DD/MM/YYYY HH:MM");
						 var updatedAt = moment(employee.updatedAt).format("DD/MM/YYYY HH:MM");
						 var $photoImageElement = $('<img>').attr('src', employee.imageUrl);
							//Create new HTML <tr> element.
							//At the same time let the $rowElement variable to represent it.
						 $rowElement = $('<tr></tr>');
						 //Create the 1ST cell element which display image
						 $cellElement = $('<td></td>');
						 //Append the image element into the cell element first.
						 $cellElement.append($photoImageElement);
						 $rowElement.append($cellElement);
							//Create the 2nd cell element which display Full Name
							$cellElement = $('<td></td>', { text: fullName });
							$rowElement.append($cellElement);
							//Create the 3rd cell element which display Join Date
							$cellElement = $('<td></td>', { text: joinDate });
							$rowElement.append($cellElement);
							//Create the 4th cell element which display Created At information
							$cellElement = $('<td></td>', { text: createdAt });
							$rowElement.append($cellElement);
							//Create the 5th cell element which display Updated At information
							$cellElement = $('<td></td>', { text: updatedAt });
							$rowElement.append($cellElement);
							//---------------- Using jQuery() to create the hyperlink element using the <a></a> --------
							$hyperLinkElement = $('<a>Update Employee</a>').attr('href', '/Employees/Update/' + employeeId);
							$hyperLinkElement.addClass('btn btn-primary');
							//The $hyperLinkElement eventually represents (references) a HTML element which is:
							//<a href="<base url>/Employees/<employee id>" class="btn btn-primary" >Update Employee</a>
							//-----------------Using jQuery() to creating the 5th cell for the row----------------------
							$cellElement = $('<td></td>');
							//-----------------Add the previous created hyperlink element, $hyperLinkElement
							//                 into the newly created 6th cell.
							//As a result, $cellElement references an element defined by:
							//<td><a href="<base url>/Employees/<employee id>" class="btn btn-primary" >Update Employee</a></td>
							$cellElement.append($hyperLinkElement);
							$rowElement.append($cellElement);
								//Create the 7th cell element.
								//Also, create an additional hyperlink element which will
								//look like a button due to the Bootstrap class.
								//This <a> hyperlink element also need to have 1 important feature:
								//When it is clicked, it will tell the web browser to request for the ManagePhoto
								//and at the same time pass a QueryString data value of the respective employee id.

								//---------------- Using jQuery() to create the hyperlink element using the <a></a> --------
							$hyperLinkElement = $('<a>Manage Photo</a>').attr('href', '/Employees/ManagePhoto/' + employeeId);
							$hyperLinkElement.addClass('btn btn-primary');
								//The $hyperLinkElement eventually represents (references) a HTML element which is:
								//<a href="/Employees/ManagePhoto/<student id>" class="btn btn-primary" >Manage Photo</a>
								//-----------------Using jQuery() to creating the cell for the row----------------------
							$cellElement = $('<td></td>');
								//-----------------Add the previous created hyperlink element, $hyperLinkElement
								//                 into the newly created cell.
								//As a result, $cellElement references an element defined by:
								//<td><a href="/Employees/ManagePhoto/<student id>" class="btn btn-primary" >Manage Photo</a></td>
							$cellElement.append($hyperLinkElement);

								//---------------Add the new cell into the row represented by the $rowElement
							$rowElement.append($cellElement);
							//Insert the $rowElement into the table element represented by $tableBodyElement.
							$tableBodyElement.append($rowElement);
							//----End of creating one row to display one employee by using <tr> and <td> HTML element ---
							//Proceed to the next course object in the employeeList Array.
						}//end of for loop.
					}//end of JavaScript anonymous function
					)//end of the done() method;
					$loadEmployeeDataHandler.fail(function (data, textStatus, jqXHR) {
						noty({
							text: 'Ajax call has failed due to : ' + data.statusText, type: 'error',
							layout: 'center',
							template: '<div class="noty_message"><span class="noty_text"></span>'
						});//end of noty()
					})//end of $loadEmployeeDataHandler.fail()
				}//end of loadEmployeeData();

</script>

